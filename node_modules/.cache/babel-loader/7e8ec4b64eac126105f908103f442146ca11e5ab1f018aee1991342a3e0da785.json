{"ast":null,"code":"var _jsxFileName = \"/Users/kavishsanghvi/task-manager/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport { saveTasks, loadTasks } from './utils/localStorageUtil';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to store tasks\n  const [tasks, setTasks] = useState([]);\n\n  // Load tasks from localStorage on component mount\n  useEffect(() => {\n    const loadedTasks = loadTasks();\n    setTasks(loadedTasks);\n  }, []);\n\n  // Persist tasks to localStorage whenever tasks state changes\n  useEffect(() => {\n    saveTasks(tasks);\n  }, [tasks]);\n\n  // Add a new task\n  const addTask = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n\n  // Edit a task\n  const editTask = id => {\n    const taskToEdit = tasks.find(task => task.id === id);\n    if (taskToEdit) {\n      const newDescription = prompt(\"Enter new description:\", taskToEdit.description);\n      if (newDescription && newDescription.length <= 100) {\n        const updatedTasks = tasks.map(task => task.id === id ? {\n          ...task,\n          description: newDescription\n        } : task);\n        setTasks(updatedTasks);\n      }\n    }\n  };\n\n  // Toggle task complete status\n  const toggleComplete = id => {\n    const updatedTasks = tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task);\n    setTasks(updatedTasks);\n  };\n\n  // Delete a task\n  const deleteTask = id => {\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    setTasks(updatedTasks);\n  };\n\n  // Toggle subtask complete status (Helper function)\n  const toggleSubtaskComplete = (taskId, subtaskId) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === taskId) {\n        const updatedSubtasks = task.subtasks.map(subtask => subtask.id === subtaskId ? {\n          ...subtask,\n          completed: !subtask.completed\n        } : subtask);\n        return {\n          ...task,\n          subtasks: updatedSubtasks\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Management App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onSubmit: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      toggleComplete: toggleComplete,\n      deleteTask: deleteTask,\n      editTask: editTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"weOf0VesAdD4xw+rXOOhYK4d8/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TaskList","TaskForm","saveTasks","loadTasks","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","loadedTasks","addTask","newTask","editTask","id","taskToEdit","find","task","newDescription","prompt","description","length","updatedTasks","map","toggleComplete","completed","deleteTask","filter","toggleSubtaskComplete","taskId","subtaskId","updatedSubtasks","subtasks","subtask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/kavishsanghvi/task-manager/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport { Task, Subtask } from './types';\nimport { saveTasks, loadTasks } from './utils/localStorageUtil';\nimport './App.css';\n\nconst App: React.FC = () => {\n  // State to store tasks\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  // Load tasks from localStorage on component mount\n  useEffect(() => {\n    const loadedTasks = loadTasks();\n    setTasks(loadedTasks);\n  }, []);\n\n  // Persist tasks to localStorage whenever tasks state changes\n  useEffect(() => {\n    saveTasks(tasks);\n  }, [tasks]);\n\n  // Add a new task\n  const addTask = (newTask: Task) => {\n    setTasks([...tasks, newTask]);\n  };\n\n  // Edit a task\n  const editTask = (id: string) => {\n    const taskToEdit = tasks.find((task) => task.id === id);\n    if (taskToEdit) {\n      const newDescription = prompt(\"Enter new description:\", taskToEdit.description);\n      if (newDescription && newDescription.length <= 100) {\n        const updatedTasks = tasks.map((task) =>\n          task.id === id ? { ...task, description: newDescription } : task\n        );\n        setTasks(updatedTasks);\n      }\n    }\n  };\n\n  // Toggle task complete status\n  const toggleComplete = (id: string) => {\n    const updatedTasks = tasks.map((task) =>\n      task.id === id\n        ? { ...task, completed: !task.completed }\n        : task\n    );\n    setTasks(updatedTasks);\n  };\n\n  // Delete a task\n  const deleteTask = (id: string) => {\n    const updatedTasks = tasks.filter((task) => task.id !== id);\n    setTasks(updatedTasks);\n  };\n\n  // Toggle subtask complete status (Helper function)\n  const toggleSubtaskComplete = (taskId: string, subtaskId: string) => {\n    const updatedTasks = tasks.map((task) => {\n      if (task.id === taskId) {\n        const updatedSubtasks = task.subtasks.map((subtask: Subtask) =>\n          subtask.id === subtaskId\n            ? { ...subtask, completed: !subtask.completed }\n            : subtask\n        );\n        return { ...task, subtasks: updatedSubtasks };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Task Management App</h1>\n      {/* Task Form to add new tasks */}\n      <TaskForm onSubmit={addTask} />\n\n      {/* Task List */}\n      <TaskList\n        tasks={tasks}\n        toggleComplete={toggleComplete}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}