{"ast":null,"code":"var _jsxFileName = \"/Users/kavishsanghvi/task-manager/src/components/TaskForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [description, setDescription] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const handleSubmit = () => {\n    if (description === \"\" || description.length > 100) {\n      alert(\"Description must not be empty and less than 100 characters.\");\n      return;\n    }\n    if (new Date(dueDate) < new Date()) {\n      alert(\"Due date cannot be in the past.\");\n      return;\n    }\n    if (category === \"\") {\n      alert(\"Please select a category.\");\n      return;\n    }\n    const newTask = {\n      id: crypto.randomUUID(),\n      // Generate a unique ID\n      description,\n      dueDate: new Date(dueDate),\n      category,\n      subtasks: [],\n      completed: false\n    };\n    onSubmit(newTask);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit();\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Task Description\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      value: dueDate,\n      onChange: e => setDueDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: category,\n      onChange: e => setCategory(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Work\",\n        children: \"Work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Personal\",\n        children: \"Personal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Urgent\",\n        children: \"Urgent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskForm, \"jyE/jVxhOKQZnPHwMTEicIJnYkw=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TaskForm","onSubmit","_s","description","setDescription","dueDate","setDueDate","category","setCategory","handleSubmit","length","alert","Date","newTask","id","crypto","randomUUID","subtasks","completed","e","preventDefault","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kavishsanghvi/task-manager/src/components/TaskForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Task } from '../types';\n\ninterface TaskFormProps {\n    onSubmit: (task: Task) => void;\n}\n\nconst TaskForm: React.FC<TaskFormProps> = ({ onSubmit }) => {\n    const [description, setDescription] = useState(\"\");\n    const [dueDate, setDueDate] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n\n    const handleSubmit = () => {\n        if (description === \"\" || description.length > 100) {\n            alert(\"Description must not be empty and less than 100 characters.\");\n            return;\n        }\n        if (new Date(dueDate) < new Date()) {\n            alert(\"Due date cannot be in the past.\");\n            return;\n        }\n        if (category === \"\") {\n            alert(\"Please select a category.\");\n            return;\n        }\n\n        const newTask: Task = {\n            id: crypto.randomUUID(),  // Generate a unique ID\n            description,\n            dueDate: new Date(dueDate),\n            category,\n            subtasks: [],\n            completed: false,\n        };\n\n        onSubmit(newTask);\n    };\n\n    return (\n        <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>\n            <input\n                type=\"text\"\n                placeholder=\"Task Description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n            />\n            <input\n                type=\"date\"\n                value={dueDate}\n                onChange={(e) => setDueDate(e.target.value)}\n            />\n            <select value={category} onChange={(e) => setCategory(e.target.value)}>\n                <option value=\"\">Select Category</option>\n                <option value=\"Work\">Work</option>\n                <option value=\"Personal\">Personal</option>\n                <option value=\"Urgent\">Urgent</option>\n            </select>\n            <button type=\"submit\">Add Task</button>\n        </form>\n    );\n};\n\nexport default TaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}